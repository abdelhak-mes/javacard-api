/**
 * Java Card 3.0.5 API
 * url: https://docs.oracle.com/javacard/3.0.5/index.html
 *
 * Copyright (C) 2020, Oracle and/or its affiliates. All rights reserved.
 */

package javacard.security;

import javacard.framework.JCSystem;
import javacard.framework.SystemException;

/**
 * The <code>RandomData</code> abstract class is the base class for random
 * number generation. Implementations of <code>RandomData</code> algorithms
 * must extend this class and implement all the abstract methods.
 */
public abstract class RandomData {

  /**
   * Utility pseudo-random number generation algorithms. The random number
   * sequence generated by this algorithm need not be the same even if seeded
   * with the same seed data.
   * <p>
   * Even if a transaction is in progress, the update of the internal state
   * shall not participate in the transaction.
   * <p>
   * The security level and the standards conformance of the pseudo random
   * number algorithm is implementation dependant
   *
   * @deprecated As of release 3.0.5.
   */
  public static final byte ALG_PSEUDO_RANDOM = 1;

  /**
   * Cryptographically secure random number generation algorithms.
   *
   * @deprecated As of release 3.0.5.
   */
  public static final byte ALG_SECURE_RANDOM = 2;

  /**
   * True Random Number Generation (TRNG) algorithm. The random number sequence
   * generated by this algorithm MUST not be the same even if seeded
   * with the same seed data.
   *  <p>
   * The security level and the standards conformance of the TRNG algorithm is
   * implementation dependant.
   *
   * @since 3.0.5
   */
  public static final byte ALG_TRNG = 3;

  /**
   * Deterministic Random Bit Generator (DRBG) algorithm. The algorithm is
   * pre-seeded by an entropy source yet may by re-seeded using
   * <code>setSeed</code> method. <p> The security level and the standards
   * conformance of the DRBG algorithm is implementation dependant.
   *
   * @since 3.0.5
   */
  public static final byte ALG_PRESEEDED_DRBG = 4;

  /**
   * Utility random number generation algorithm.
   * Random number generated by this algorithm are not suitable for key
   * and nonce generation.
   * The security level of this algorithm is implementation dependant.
   * @since 3.0.5
   */
  public static final byte ALG_FAST = 5;

  /**
   * This algorithm creates random numbers suitable to be used for key and
   * nonce generation.
   * <p>
   * The security level and the standards conformance of the this algorithm is
   * implementation dependant.
   * </p>
   * @since 3.0.5
   */
  public static final byte ALG_KEYGENERATION = 6;

  /**
   * Protected constructor for subclassing.
   */
  protected RandomData() {}

  /**
   * Creates a <code>RandomData</code> instance of the selected algorithm.
   * The pseudo random <code>RandomData</code> instance's seed is
   * initialized to a internal default value.
   *
   * @param algorithm
   *            the desired random number algorithm. Valid codes listed in
   *            <code>ALG_*</code> constants above, for example
   *            {@link #ALG_PRESEEDED_DRBG ALG_PRESEEDED_DRBG}.
   * @return the <code>RandomData</code> object instance of the requested
   *         algorithm
   * @exception CryptoException
   *                with the following reason codes:
   *                <ul>
   *                <li><code>CryptoException.NO_SUCH_ALGORITHM</code> if
   *                the requested algorithm is not supported.
   *                </ul>
   */
  public static final RandomData getInstance(byte algorithm)
      throws CryptoException {
    switch (algorithm) {
    default:
      CryptoException.throwIt(CryptoException.NO_SUCH_ALGORITHM);
      break;
    }
    return null;
  }

  /**
   * Generates random data.
   * @param buffer
   *            the output buffer
   * @param offset
   *            the offset into the output buffer
   * @param length
   *            the length of random data to generate
   * @exception CryptoException
   *                with the following reason codes:
   *                <ul>
   *                <li><code>CryptoException.ILLEGAL_VALUE</code> if the
   *                <code>length</code> parameter is zero.
   *                </ul>
   * @deprecated As of release 3.0.5, replaced by {@link #nextBytes}.
   */
  public abstract void generateData(byte[] buffer, short offset, short length)
      throws CryptoException;

  /**
   * Generates random data.
   * <p>
   * In addition to returning a {@code short} result, this method sets the
   * result in an internal state which can be rechecked using assertion methods
   * of the {@link javacardx.security.SensitiveResult SensitiveResult} class,
   * if supported by the platform.
   *
   * @param buffer
   *            the output buffer
   * @param offset
   *            the offset into the output buffer
   * @param length
   *            the length of random data to generate
   * @throws CryptoException
   *                with the following reason codes:
   *                <ul>
   *                <li><code>CryptoException.ILLEGAL_VALUE</code> if the
   *                <code>length</code> parameter is zero.
   *                </ul>
   * @return <code>offset+length</code>
   * @since 3.0.5
   */
  public abstract short nextBytes(byte[] buffer, short offset, short length)
      throws CryptoException;

  /**
   * Seeds the random data generator. This method alters the state of this
   * random number generator so as to be in exactly the same state as if it
   * had just been created with the seed provided as argument to this method.
   *
   * @param buffer
   *            the input buffer
   * @param offset
   *            the offset into the input buffer
   * @param length
   *            the length of the seed data
   */
  public abstract void setSeed(byte[] buffer, short offset, short length);

  /**
   * Gets the random number generation algorithm. Valid codes listed in
   * <code>ALG_*</code> constants above, for example,
   * {@link #ALG_PRESEEDED_DRBG ALG_PRESEEDED_DRBG}.
   * <p>
   * In addition to returning a {@code byte} result, this method sets the
   * result in an internal state which can be rechecked using assertion methods
   * of the {@link javacardx.security.SensitiveResult SensitiveResult} class,
   * if supported by the platform.
   *
   * @return the algorithm code defined above
   * @since 3.0.5
   */
  public abstract byte getAlgorithm();

  /**
   * The {@code OneShot} class is a specialization of the {@code RandomData}
   * class intended to support efficient one-shot random data generation
   * operations that may avoid persistent memory writes entirely. The
   * {@code OneShot} class uses a delegation model where calls are delegated to
   * an instance of a {@code RandomData}-implementing class configured for
   * one-shot use.
   * <p>
   * Note:
   * <ul>
   * <li><em>Instances of </em>{@code OneShot}<em> are JCRE owned temporary
   * Entry Point Object instances and references to these temporary objects
   * cannot be stored in class variables or instance variables or array
   * components. See Runtime Environment Specification, Java Card Platform,
   * Classic Edition, section 6.2.1 for details.</em></li>
   * <li><em>The platform must support at least one instance of
   * </em>{@code OneShot}<em>. Support for several </em>{@code OneShot}<em>
   * instances is platform dependent. To guarantee application code portability,
   * acquiring/opening and then releasing/closing
   * </em>{@code OneShot}<em> instances should be performed within tight
   * {@code try-catch-finally} blocks (as illustrated in the code sample below)
   * in order to avoid unnecessarily keeping hold of instances and to prevent
   * interleaving invocations - hence enforcing the <b>One-Shot</b> usage
   * pattern. Additionally, any local variable holding a reference to a
   * </em>{@code OneShot}<em> instance should be set to {@code null} once the
   * instance is closed in order to prevent further use attempts.</em></li>
   * <li><em>Upon return from any {@code Applet} entry point method, back to the
   * JCRE, and on tear or card reset events any {@code OneShot} instances in use
   * are released back to the JCRE.</em> <li><em>The internal state associated
   * with an instance of
   * </em>{@code OneShot}<em> must be bound to the initial calling context
   * (owner context) as to preclude use/calls on that instance from other
   * contexts.</em></li>
   * <li><em>Unless otherwise specified, after an instance of
   * </em>{@code OneShot}<em> is released back to the JCRE, calls to any of the
   * instance methods of the </em>{@code OneShot}<em> class results in an
   * </em>{@code CryptoException}<em> being thrown with reason code
   * </em>{@code CryptoException.ILLEGAL_USE}<em>.</em></li>
   * </ul>
   * <p>
   * The following code shows a typical usage pattern for the {@code OneShot}
   * class.
   * <pre>
   * ...
   * RandomData.OneShot rng = null;
   * try {
   *     rng = RandomData.OneShot.open(RandomData.ALG_TRNG);
   *     rng.nextBytes(rndData, (short) 0, (short) rndData.length);
   * } catch (CryptoException ce) {
   *     // Handle exception
   * } finally {
   *     if (rng != null) {
   *        rng.close();
   *        rng = null;
   *     }
   * }
   * ...
   * </pre>
   *
   * @since 3.0.5
   */
  public static final class OneShot extends RandomData {

    /**
     * Opens/acquires a JCRE owned temporary Entry Point Object instance of
     * {@code OneShot} with the selected algorithm. The pseudo random
     * {@code RandomData.OneShot} instance's seed is initialized to a internal
     * default value.
     *
     * @param algorithm the desired random number algorithm. Valid codes listed
     * in {@code ALG_*} constants above, for example
     * {@link #ALG_PRESEEDED_DRBG ALG_PRESEEDED_DRBG}.
     * @return the {@code RandomData.OneShot} object instance of the requested
     * algorithm.
     *
     * @throws CryptoException with the following reason codes:
     * <ul>
     * <li>{@code CryptoException.NO_SUCH_ALGORITHM} if the requested algorithm
     * is not supported.</li>
     * </ul>
     * @throws javacard.framework.SystemException with the following reason
     * codes:
     * <ul>
     * <li>{@code SystemException.NO_RESOURCE} if sufficient resources are not
     * available.</li>
     * </ul>
     */
    public static final OneShot open(byte algorithm) throws CryptoException {
      // TODO: Not yet implemented!!!
      CryptoException.throwIt(CryptoException.ILLEGAL_USE);
      return null;
    }

    /**
     * Closes and releases this JCRE owned temporary instance of the
     * {@code OneShot} object for reuse. If this method is called again this
     * method does nothing.
     *
     * @throws SecurityException if this JCRE owned temporary instance of the
     * {@code OneShot} object was opened in a context different from that of the
     * caller.
     */
    public void close() {
      // TODO: Not yet implemented!!!
    }

    /**
     * {@inheritDoc}
     *
     * @throws SecurityException if this JCRE owned temporary instance of the
     * {@code OneShot} object was opened in a context different from that of the
     * caller.
     */
    @Override
    public byte getAlgorithm() {
      // TODO: Not yet implemented!!!
      return 0;
    }

    /**
     * {@inheritDoc}
     *
     * @throws SecurityException if this JCRE owned temporary instance of the
     * {@code OneShot} object was opened in a context different from that of the
     * caller.
     *
     * @deprecated As of release 3.0.5, replaced by {@link #nextBytes}.
     */
    @Override
    public void generateData(byte[] buffer, short offset, short length) {
      // TODO: Not yet implemented!!!
    }

    /**
     * {@inheritDoc}
     *
     * @throws SecurityException if this JCRE owned temporary instance of the
     * {@code OneShot} object was opened in a context different from that of the
     * caller.
     */
    @Override
    public short nextBytes(byte[] buffer, short offset, short length)
        throws CryptoException {
      // TODO: Not yet implemented!!!
      return 0;
    }

    /**
     * {@inheritDoc}
     *
     * @throws SecurityException if this JCRE owned temporary instance of the
     * {@code OneShot} object was opened in a context different from that of the
     * caller.
     */
    @Override
    public void setSeed(byte[] buffer, short offset, short length) {
      // TODO: Not yet implemented!!!
    }
  }
}
